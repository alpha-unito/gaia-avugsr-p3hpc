#################################################################################
###---###                G a i a                                        ###---###
###---###              G S R P a r                                      ###---###
###---###            M a k e f i l e                                    ###---###
###---###---###---###---###---###---###---###---###---###---###---###---###---###
###---###---###---###---###---###---###---###---###---###---###---###---###---###
#################################################################################

#################################################################################
###---### C O M P I L E R   S E T T I N G S                             ###---###
###---###---###---###---###---###---###---###---###---###---###---###---###---###

GNUTOOLCHAIN	?=	#PATHTOGCC example: /opt/compiler/gcc
MPI_HOME		?=	#PATHTOMPIHOME
GPUARCH			?=	sm_80

# Conditional statements
ifeq ("$(GPUARCH)","sm_90")
    $(info Compiling code for Hopper)
	GENCODE		=arch=compute_90,code=$(GPUARCH)
	GPUFLAG		=cc90
	CUDAFLAG	= -std=c++20 
	NVDIA		=-D__NVIDIA90__
else ifeq ("$(GPUARCH)","sm_80")
    $(info Compiling code for Ampere)
	GENCODE		=arch=compute_80,code=$(GPUARCH)
	GPUFLAG		=cc80
	TBBLINK		=-ltbb
	CUDAFLAG	=--allow-unsupported-compiler -std=c++17 
	NVIDIA		=-D__NVIDIA80__
else ifeq ("$(GPUARCH)","sm_75")
    $(info Compiling code for Tesla)
	GENCODE		=arch=compute_75,code=$(GPUARCH)
	GPUFLAG		=cc75
	CUDAFLAG	= -std=c++20 
	NVIDIA		=-D__NVIDIA70__
else ifeq ("$(GPUARCH)","sm_70")
    $(info Compiling code for Volta)
	GENCODE		=arch=compute_70,code=$(GPUARCH)
	GPUFLAG		=cc70
	CUDAFLAG	= -std=c++20 
	NVIDIA 		=-D__NVIDIA70__
else
    $(info GPUARCH has an unexpected value: $(GPUARCH))
endif


CMPCUDA  		= nvcc
CMPSYCL  		= clang++
CMPNVCPP  		= nvc++
CMPOMPGPU  		= nvc++
CMPHIP			= hipcc


###---###
OPTCOM		= -O3 $(NVIDIA)
OPTCUDA		= $(OPTCOM) $(CUDAFLAG) -gencode=$(GENCODE)

OPTSYCL		= $(OPTCOM) -fsycl -fsycl-targets=nvptx64-nvidia-cuda -Xsycl-target-backend --cuda-gpu-arch=$(GPUARCH) 
OPTSTDPARG	= $(OPTCOM) -std=c++20 --gcc-toolchain=$(GNUTOOLCHAIN) -stdpar=gpu -gpu=$(GPUFLAG),$(GPUARCH)
OPTOMPGPU   = $(OPTCOM) -std=c++20 --gcc-toolchain=$(GNUTOOLCHAIN) -mp=gpu -gpu=$(GPUFLAG),$(GPUARCH) -DAUTO_TUNING
OPTHIP 		= $(OPTCOM) $(CUDAFLAG) --gpu-architecture=$(GPUARCH)

###---###
CPPCUDA		= $(CMPCUDA) $(OPTCUDA)
CPPSYCL		= $(CMPSYCL) $(OPTSYCL)
CPPSTDPARG	= $(CMPNVCPP) $(OPTSTDPARG)
CPPOMPGPU	= $(CMPOMPGPU) $(OPTOMPGPU)
CPPHIP		= $(CMPHIP) $(OPTHIP)


###---###
GAIA_INC = -I$(PWD)/include
MPI_INC = -I$(MPI_HOME)/include
INCLUDE = $(GAIA_INC) $(MPI_INC)
CPPFLAGS = $(INCLUDE)
MPI_LIB = -L$(MPI_HOME)/lib -lmpi
LIB      = $(MPI_LIB)

###---### O B J E C T S
GAIAGSRSIMCUDA			= build_obj/lsqrblas_cuda.o build_obj/lsqr_cuda.o build_obj/solvergaiaSim_cuda.o build_obj/util_cuda.o
GAIAGSRSIMSYCL			= build_obj/lsqrblas_sycl.o build_obj/lsqr_sycl.o build_obj/solvergaiaSim_sycl.o build_obj/util_sycl.o
GAIAGSRSIMSTDPARGPU		= build_obj/lsqrblas_stdpar.o build_obj/lsqr_stdpar.o build_obj/solvergaiaSim_stdpar.o build_obj/util_stdpar.o
GAIAGSRSIMOMPGPU		= build_obj/lsqrblas_omp.o build_obj/lsqr_openmp_gpu.o build_obj/solvergaiaSim_omp.o build_obj/util_omp.o
GAIAGSRSIMHIP			= build_obj/lsqrblas_hip.o build_obj/lsqr_hip.o build_obj/solvergaiaSim_hip.o build_obj/util_hip.o

###---### R U L E S
.PHONY: all cuda sycl stdparG ompG hip dir clean

all:  clean cuda sycl stdparG ompG hip
cuda: build_obj/GaiaGsrParSimCuda.x
sycl: build_obj/GaiaGsrParSimIntelSycl.x
stdparG: build_obj/GaiaGsrParSimStdparGPU.x
ompG: build_obj/GaiaGsrParSimOMPGpu_NVCPP.x
hip: build_obj/GaiaGsrParSimHip.x

dir:
	mkdir -p build_obj

clean:
	rm -rf build_obj *.x

build_obj/GaiaGsrParSimCuda.x: dir src/lsqr_cuda.cu src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPCUDA) $(CPPFLAGS) -c src/lsqr_cuda.cu	-o build_obj/lsqr_cuda.o
	$(CPPCUDA) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_cuda.o
	$(CPPCUDA) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_cuda.o
	$(CPPCUDA) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_cuda.o
	$(CPPCUDA) -o GaiaGsrParSimCuda.x $(GAIAGSRSIMCUDA) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimStdparGPU.x: dir src/solvergaiaSim.cpp src/util.cpp  src/lsqrblas.cpp src/lsqr_stdpar.cpp
	$(CPPSTDPARG) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_stdpar.o
	$(CPPSTDPARG) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_stdpar.o
	$(CPPSTDPARG) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_stdpar.o
	$(CPPSTDPARG) $(CPPFLAGS) -c src/lsqr_stdpar.cpp -o build_obj/lsqr_stdpar.o
	$(CPPSTDPARG) -o GaiaGsrParSimStdparGPU.x $(GAIAGSRSIMSTDPARGPU) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimIntelSycl.x: dir src/lsqr_sycl.cpp src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPSYCL) $(CPPFLAGS) -c src/lsqr_sycl.cpp -o build_obj/lsqr_sycl.o
	$(CPPSYCL) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_sycl.o
	$(CPPSYCL) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_sycl.o
	$(CPPSYCL) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_sycl.o
	$(CPPSYCL) -o GaiaGsrParSimIntelSycl.x $(GAIAGSRSIMSYCL) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimOMPGpu_NVCPP.x: dir src/lsqr_openmp_gpu.cpp src/lsqrblas.cpp  src/util.cpp src/solvergaiaSim.cpp
	$(CPPOMPGPU) $(CPPFLAGS) -c src/lsqr_openmp_gpu.cpp	-o build_obj/lsqr_openmp_gpu.o
	$(CPPOMPGPU) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_omp.o
	$(CPPOMPGPU) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_omp.o
	$(CPPOMPGPU) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_omp.o
	$(CPPOMPGPU) -o GaiaGsrParSimOMPGpu_NVCPP.x $(GAIAGSRSIMOMPGPU) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimHip.x: dir src/lsqr_hip.cpp src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPHIP) $(CPPFLAGS) -c src/lsqr_hip.cpp	-o build_obj/lsqr_hip.o
	$(CPPHIP) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_hip.o
	$(CPPHIP) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_hip.o
	$(CPPHIP) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_hip.o
	$(CPPHIP) -o GaiaGsrParSimHip.x $(GAIAGSRSIMHIP) $(INCLUDE) $(LIB)
